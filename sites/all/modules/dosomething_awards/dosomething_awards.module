<?php

/**
 * Node definitions. Should probably do this a little nicer.
 * DSAPP_APP is the application webform nid.
 * DSAPP_REC is the recommendation wegform nid.
 */
define('DSAPP_APP', 727926);
define('DSAPP_REC', 727992);
define('DSAPP_NOM', 728548);
define('DSAPP_MOD', 735470);

/**
 * Implements hook_menu()
 */
function dosomething_awards_menu() {
  $items['dsawards/resend/%/%'] = array(
    'page callback' => 'dosomething_awards_resend_email',
    'page arguments' => array(2,3),
    'access callback' => 'dosomething_awards_submission_permission',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
  );

  $items['dsawards/status/%'] = array(
    'page callback' => 'dosomething_awards_app_status',
    'page arguments' => array(2),
    'access callback' => 'dosomething_awards_submission_permission',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
  );

  $items['dsawards/nomination-moderation/%'] = array(
    'page callback' => 'dosomething_awards_nomination_moderation',
    'page arguments' => array(2),
    'access callback' => 'dosomething_awards_submission_permission',
    'type' => MENU_CALLBACK,
  );

  $items['dsawards/nomination-moderation'] = array(
    'page callback' => 'dosomething_awards_nomination_moderation',
    'access callback' => 'dosomething_awards_submission_permission',
    'type' => MENU_CALLBACK,
  );

  $items['dsawards/judge'] = array(
    'page callback' => 'dosomething_awards_judge',
    'access callback' => 'dosomething_awards_judge_perm',
    'type' => MENU_CALLBACK,
  );

  $items['dsawards/judge/confirm'] = array(
    'page callback' => 'dosomething_awards_judge_confirm',
    'access callback' => 'dosomething_awards_judge_perm',
    'type' => MENU_CALLBACK,
  );

  $items['dsawards/pull.csv'] = array(
    'page callback' => 'dosomething_awards_pull',
    'access callback' => 'dosomething_awards_submission_permission',
    'type' => MENU_CALLBACK,
  );

  $items['dsawards/judge/%'] = array(
    'page callback' => 'dosomething_awards_judge_app',
    'page arguments' => array(2),
    'access callback' => 'dosomething_awards_judge_perm',
    'type' => MENU_CALLBACK,
  );

  $items['dsawards/view/%'] = array(
    'page callback' => 'dosomething_awards_judge_app',
    'page arguments' => array(2, false),
    'access callback' => 'dosomething_awards_submission_permission',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_theme()
 */
function dosomething_awards_theme() {
  $theme = array(
    'dsawards_status' => array(
      'arguments' => array(
        'sid' => NULL,
        'draft' => NULL,
        'recommendations' => NULL,
      ),
      'template' => 'templates/dsawards-status',
    ),
    'dsawards_judge' => array(
      'arguments' => array(
        'app_list' => NULL,
      ),
      'template' => 'templates/dsawards-judge-landing',
    ),
    'dsawards_judge_confirm' => array(
      'arguments' => array(
        'incomplete' => true,
      ),
      'template' => 'templates/dsawards-judge-confirm',
    ),
    'dsawards_app' => array(
      'arguments' => array(
        'app' => NULL,
        'rec' => NULL,
      ),
      'template' => 'templates/dsawards-app',
    ),
  );
  return $theme;
}

/**
 * Implements hook_block()
 */

function dosomething_awards_block($op = 'list', $delta = 0) {
  $block = array();
  switch ($op) {
    case 'list':
      $block[0]['info'] = t('Do Something Awards Judge Form');
      return $block;
    case 'view':
      $block['subject'] = t('Judgment Form');
      $block['content'] = dosomething_awards_get_judgment_form();
      return $block;
  }
}

function dosomething_awards_get_judgment_form() {
  global $user;
  $sid = arg(2);
  module_load_include('inc', 'node', 'node.pages');

  $return = <<<EOM
<p>Scoring: The applicants should be judged on a scale of 1-10
(1 = absolutely do not agree; 5 = neutral; 10 = totally agree).</p>
<p>The applicant...</p>
EOM;
  $q = "SELECT nid FROM node WHERE title=$sid AND uid={$user->uid}";
  $nid = db_fetch_object(db_query($q))->nid;
  $node = node_load($nid);
  if (!is_null($node->nid)) {
    $return.= drupal_get_form($node->type.'_node_form', $node);
  }
  return $return;
}
/**
 * Implements hook_form_alter(&$form, &$form_state, $form_id)
 *
 * Adds a submit handler to suppress emails on submission that should only
 * go out in the case of a draft.
 *
 */
function dosomething_awards_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'webform_client_form_'.DSAPP_APP) {
    $first = array_shift($form['#submit']);
    array_unshift($form['#submit'], $first, 'dosomething_awards_unset_emails');
  }
  else if ($form_id == 'webform_client_form_'.DSAPP_REC) {
    $first = array_shift($form['#submit']);
    array_unshift($form['#submit'], $first, 'dosomething_awards_set_email');
  }
}

/**
 * Suppress emails that we don't want going out on submission.
 */
function dosomething_awards_unset_emails(&$form, &$form_state) {
  if ($form_state['save_draft']) return;

  $suppress = array(1, 2, 3, 4, 5);
  foreach ($suppress as $email) {
    unset($form['#node']->webform['emails'][$email]);
  }
}

/**
 * Set the send-to address of the email to the applicant's email.
 */
function dosomething_awards_set_email(&$form, &$form_state) {
  module_load_include('inc', 'webform', 'includes/webform.submissions');
  $sid = $form_state['values']['submitted_tree']['sid'];
  $app = webform_get_submission(DSAPP_APP, $sid);
  $email = $app->data[dosomething_awards_load_field(DSAPP_APP, 'email_address')]['value'][0];
  $form['#node']->webform['emails'][1]['email'] = $email;
}

function dosomething_awards_resend_email($sid, $rec_num) {
  global $user;
  module_load_include('inc', 'webform', 'includes/webform.submissions');
  $submission = webform_get_submission(DSAPP_APP, $sid);
  $node = node_load(DSAPP_APP);
  webform_submission_send_mail($node, $submission, array($node->webform['emails'][$rec_num]));
  drupal_goto('dsawards/status/'.$sid);
}

function dosomething_awards_submission_permission($sid = null) {
  global $user;
  if (is_null($sid))
    return user_access('access all webform results');
  module_load_include('inc', 'webform', 'includes/webform.submissions');
  $submission = webform_get_submission(DSAPP_APP, $sid);
  return ($user->uid == $submission->uid || user_access('access all webform results'));
}

function dosomething_awards_judge_perm() {
  global $user;
  $perms = array('grant reviewer', 'administrator');
  return (count(array_diff($perms, array_values($user->roles))) < 2);
}

function dosomething_awards_judge() {
  global $user;
  module_load_include('inc', 'webform', 'includes/webform.submissions');
  $q = 'SELECT n.nid, n.title as sid, ct.field_dsa_complete_value FROM node n JOIN content_type_dsa_judge ct ON ct.nid=n.nid WHERE ct.field_dsa_complete_value IS NOT TRUE AND uid='.$user->uid;
  $rs = db_query($q);
  if (mysql_num_rows($rs) == 0) {
    $apps = dosomething_awards_random_apps(10);
    foreach ($apps as $app)
    {
      $node = new stdClass();
      $node->type = 'dsa_judge';
      $node->title = $app;
      $node->uid = $user->uid; 
      $node->status = 0;
      print_r($node);
      node_save($node);
    }
    $rs = db_query($q);
  }
  $rows = array();
  $headers = array('Name', 'Complete %');
  while($row = db_fetch_array($rs)) {
    $sub = webform_get_submission(DSAPP_APP, $row['sid']);
    $rows[] = array(l($sub->data[12]['value'][0], 'dsawards/judge/'.$row['sid']), dosomething_awards_percent_complete($row['nid']).'%');
  }
  $form = <<<EOM
<form action="/dsawards/judge/confirm" method="get">
<input type="submit" value="Submit" />
</form>
EOM;
  return theme('table', $headers, $rows).$form;
  //return theme('dsawards_judge', dosomething_awards_random_apps(10));
}

function dosomething_awards_judge_confirm() {
  global $user;
  $q = 'SELECT n.nid FROM node n JOIN content_type_dsa_judge ct ON ct.nid=n.nid WHERE ct.field_dsa_complete_value IS NOT TRUE AND uid='.$user->uid;
  $rs = db_query($q);
  $incomplete = false;
  $nids = array();
  while ($row = db_fetch_array($rs)) {
    if (dosomething_awards_percent_complete($row['nid']) != 100)
      $incomplete = true;
    $nids[] = $row['nid'];
  }
  if (!$incomplete) {
    foreach ($nids as $nid) {
      $judgment = node_load($nid);
      $judgment->field_dsa_complete[0]['value'] = 1;
      node_save($judgment);
    }
  }

  return theme('dsawards_judge_confirm', $incomplete);
}

function dosomething_awards_pull() {
  set_time_limit(120);
  module_load_include('inc', 'webform', 'includes/webform.submissions');
  $subs = webform_get_submissions(DSAPP_APP);
  $recs = webform_get_submissions(DSAPP_REC);
  foreach ($recs as $rec) {
    $subs[$rec->data[1]['value'][0]]->rec[$rec->data[2]['value'][0]] = TRUE;
  }
  
  echo 'Complete,sid,';
  $fields = array(
    12 => 'Project Title',
    3 => 'Name',
    4 => 'Cell number',
    44 => 'Alternate phone',
    5 => 'Email',
    6 => 'Street Address',
    8 => 'City',
    7 => 'State',
    9 => 'Zip',
    10 => 'Gender',
    11 => 'Birthday',
    51 => 'Applied before?',
    1 => 'Project posting (/node/XXX)',
    14 => 'Short Description',
    15 => 'Time in existence',
    16 => 'People involved',
    45 => 'Participant Emails',
    17 => 'Number impacted',
    31 => 'Recommender 1',
    36 => 'Recommender 2',
  );

  echo implode(',', $fields) . ',R1 received?,R2 received?' . "\n";
  foreach ($subs as $sub) {
    $out = array(
      ($sub->is_draft)?'no':'yes',
      $sub->sid,
    );
    foreach ($fields as $k => $f) {
      $out[] = '"'.$sub->data[$k]['value'][0].'"';
    }
    $out[] = $sub->rec[1];
    $out[] = $sub->rec[2];
    echo implode(',',$out), "\n";
  }
  drupal_set_header('Content-Type: text/x-comma-separated-values');
  module_invoke_all('exit');
  exit;
}

function dosomething_awards_judge_app($sid, $judgeForm = true) {
  module_load_include('inc', 'webform', 'includes/webform.submissions');
  $app = webform_get_submission(DSAPP_APP, $sid);
  $recs = webform_get_submissions(DSAPP_REC);
  $recs_valid = array();
  foreach ($recs as $rec) {
    if ($rec->data[1]['value'][0] == $sid)
      $recs_valid[] = $rec;
  }

  $node = node_load(DSAPP_APP);
  $app_return = array('sid' => $sid);
  foreach ($node->webform['components'] as $component) {
    if (isset($app_return[$component['form_key']])) {
      if (!is_array($app_return[$component['form_key']])) {
        $app_return[$component['form_key']] = array($app_return[$component['form_key']]);
      }
      $app_return[$component['form_key']][] = $app->data[$component['cid']]['value'][0];
    }
    else {
      $app_return[$component['form_key']] = $app->data[$component['cid']]['value'][0];
    }
  }
  $node = node_load(DSAPP_REC);
  $recs_return = array();
  for ($i = 0; $i < count($recs_valid); $i++) {
    $recs_return[$i] = array();
    foreach ($node->webform['components'] as $component) {
      $recs_return[$i][$component['form_key']] = $recs_valid[$i]->data[$component['cid']]['value'][0];
    }
    unset($recs_return[$i]['sid']);
  }

  return theme('dsawards_app', $app_return, $recs_return);
}

function dosomething_awards_app_status($sid) {
  module_load_include('inc', 'webform', 'includes/webform.submissions');
  $submission = webform_get_submission(DSAPP_APP, $sid);
  if (!isset($submission->sid)) {
    return theme('dsawards_status', NULL, NULL, NULL);
  }
  $rs = db_query("SELECT sid FROM {webform_submitted_data} WHERE nid=%d AND cid=%d AND data='%s'", DSAPP_REC, dosomething_awards_load_field(DSAPP_REC, 'sid'), $sid);

  $project = dosomething_awards_load_field(DSAPP_APP, 'project_title');
  $project = $submission->data[$project]['value'][0];
  $draft = (bool) $submission->is_draft;

  $rec_submitted = array(FALSE, FALSE);
  while ($rec = db_result($rs)) {
    $rec = webform_get_submission(DSAPP_REC, $rec);
    $rec_submitted[$rec->data[dosomething_awards_load_field(DSAPP_REC, 'rid')]['value'][0]] = TRUE;
  }

  $recs = array();
  for ($i = 1; $i <= 2; $i++) {
    $parent = dosomething_awards_load_field(DSAPP_APP, 'recommendation_'.$i);
    $email = dosomething_awards_load_field(DSAPP_APP, 'email', $parent);
    $name = dosomething_awards_load_field(DSAPP_APP, 'name', $parent);

    $recs[] = array(
      'name' => $submission->data[$name]['value'][0],
      'email' => $submission->data[$email]['value'][0],
      'received' => $rec_submitted[$i],
      'rid' => $i,
    );
  }

  drupal_set_title($project . ' Do Something Awards Application Status');

  return theme('dsawards_status', $sid, $draft, $recs);
}

function dosomething_awards_nomination_moderation($view = 'unviewed') {
  module_load_include('inc', 'webform', 'includes/webform.submissions');
  $nominations = webform_get_submissions(DSAPP_NOM);
  $judgments = webform_get_submissions(DSAPP_MOD);
  $return = array();

  if ($view == 'unviewed') {
    foreach ($judgments as $judgment) {
      unset($nominations[$judgment->data[1]['value'][0]]);
    }
    $return = $nominations;
  }
  else {
    foreach ($judgments as $key => $judgment) {
      $rating_field = dosomething_awards_load_field(DSAPP_MOD, 'rating');
      $sid_field = dosomething_awards_load_field(DSAPP_MOD, 'app_sid');

      if ($judgment->data[$rating_field]['value'][0] == $view) {
        $sid = $judgment->data[$sid_field]['value'][0];
        $return[$sid] = $nominations[$sid];
      }
    }
  }

  $menu = theme('links', array(
    array('title' => 'Unviewed', 'href' => 'dsawards/nomination-moderation'),
    array('title' => 'Yes', 'href' => 'dsawards/nomination-moderation/yes'),
    array('title' => 'No', 'href' => 'dsawards/nomination-moderation/no'),
    array('title' => 'Maybe', 'href' => 'dsawards/nomination-moderation/maybe'),
  ));
  
  $spit = array();
  foreach ($return as $key => $link) {
    $spit[] = l($key, 'node/'.DSAPP_NOM."/submission/$key", array('query' => 'destination='.$_GET['q']));
  }

  drupal_set_title('DS Awards Moderation: '.$view);
  return $menu . theme('item_list', $spit);
}

/**
 * Implements hook_webform_submission_insert($node, $submission)
 */
function dosomething_awards_webform_submission_insert($node, $submission) {
  if ($node->nid == DSAPP_APP) {
    if ($submission->is_draft) {
      webform_submission_send_mail($node, $submission, array($node->webform['emails'][5]));
    }
    for ($i = 1; $i <= 2; $i++) {
      $parent = dosomething_awards_load_field(DSAPP_APP, 'recommendation_'.$i);
      $email = dosomething_awards_load_field(DSAPP_APP, 'email', $parent);
      $name = dosomething_awards_load_field(DSAPP_APP, 'name', $parent);

      if (!empty($submission->data[$email]['value'][0])) {
        webform_submission_send_mail($node, $submission, array($node->webform['emails'][$i], $node->webform['emails'][$i+2]));
      }
    }
  }
}

/**
 * Implements hook_webform_submission_presave($node, &$submission)
 */
function dosomething_awards_webform_submission_presave($node, &$submission) {
  if ($node->nid == DSAPP_APP) {
    if (isset($submission->sid)) {
      // reload the node in case it was unset above
      $node = node_load(DSAPP_APP);
      module_load_include('inc', 'webform', 'includes/webform.submissions');
      $previous = webform_get_submission(DSAPP_APP, $submission->sid, TRUE);
      for ($i = 1; $i <= 2; $i++) {
        $parent = dosomething_awards_load_field(DSAPP_APP, 'recommendation_'.$i);
        $email = dosomething_awards_load_field(DSAPP_APP, 'email', $parent);
        $email_check = $previous->data[$email]['value'][0] !== $submission->data[$email]['value'][0];
        if ($email_check && !empty($submission->data[$email]['value'][0])) {
          webform_submission_send_mail($node, $submission, array($node->webform['emails'][$i], $node->webform['emails'][$i+2]));
        }
      }
    }
  }
}

/**
 * Implements hook_webform_select_options_info().
 */
function dosomething_awards_webform_select_options_info() {
  $items = array();
  $items['user_projects'] = array(
      'title' => t('User\'s projects'),
      'options callback' => 'dosomething_awards_options_user_projects'
  );
  return $items;
}

function dosomething_awards_options_user_projects() {
  global $user;
  if ($user->uid == 0) return;
  if (in_array('administrator', $user->roles)) {
    $rs = db_query("SELECT n.nid, n.title FROM {node} n WHERE n.type='project' ORDER BY n.title");
  }
  else {
    $rs = db_query("SELECT n.nid, n.title FROM {node} n WHERE n.type='project' AND n.uid=%d", $user->uid);
  }
  
  $options = array();
  while ($project = db_fetch_array($rs)) {
      $options[$project['nid']] = $project['title'];
  }
  
  if (count($options) === 0);
      //$options[0] = '< Please create a project. >';
  return $options;
}

function dosomething_awards_load_field($nid, $field_name, $pid = NULL) {
  $node = node_load($nid);

  foreach ($node->webform['components'] as $component) {
    if (($component['form_key'] == $field_name && isset($pid) && $component['pid'] == $pid) ||
        ($component['form_key'] == $field_name && !isset($pid))) {
      return $component['cid'];
    }
  }
}

function dosomething_awards_percent_complete($nid) {
  $fields = array();
  for ($i=1;$i<=10;$i++) { $fields[] = 'field_dsa_'.$i.'_value'; }
  $fields = implode(',',$fields);
  $q = "SELECT $fields FROM content_type_dsa_judge WHERE nid=$nid";
  $rs = db_fetch_array(db_query($q));
  $count = 0;
  foreach (array_keys($rs) as $key) {
    if ($rs[$key] != '') $count++;
  }
  return $count/10*100;
}

function dosomething_awards_random_apps($num_apps = null, $full_app = false) {
  module_load_include('inc', 'webform', 'includes/webform.submissions');
  $q = "SELECT sid FROM webform_submissions WHERE nid=".DSAPP_APP." AND is_draft=0";
  $rs = db_query($q);
  $return = array();
  while ($row = db_fetch_array($rs)) {
    $return[$row['sid']] = $row['sid'];
  }

  $q = "SELECT title as sid, COUNT(title) as count FROM node WHERE type='fl_judge' GROUP BY title ORDER BY count ASC, RAND()";
  $rs = db_query($q);

  $judged = array();
  while ($row = db_fetch_array($rs)) {
    unset($return[$row['sid']]);
    $judged[] = $row['sid'];
  }

  // filter out apps that this judge has already judged
  $q = "SELECT title as sid FROM node WHERE uid={$user->uid}";
  $rs = db_query($q);
  while ($row = db_fetch_array($rs)) {
    unset($return[$row['sid']]);
  }

  // clean up the arrays and merge them together
  $return = array_values($return);
  shuffle($return);
  $return = array_merge($return, $judged);

  $return = array_slice($return, 0, $num_apps);
  if ($full_app) {
    $return = webform_get_submissions(array('nid' => DSAPP_APP, 'sid' => $return));
  }

  return $return;
}
