<?

/**
 * Implementation of hook_form_alter()
*/
function dosomething_forms_form_alter(&$form, &$form_state, $form_id) {
  //
  // contenttype node form
  //
  global $user;
  $user = user_load($user->uid);
  $form['#ds_data']['user'] = $user;
  if (isset($form['#attributes']['class'])) {
    $form['#attributes']['class'] .= ' ' . $form_id;
  } else {
    $form['#attributes']['class'] = $form_id;
  }

  if (substr($form_id, -10) == '_node_form') {

    //$form['body_field']['body']['#rows'] = 5;
    $form['body_field']['body']['#resizable'] = TRUE;
    
    // remove "split summary at cursor" button and related elements if necessary
    $form['body_field']['#after_build'] = NULL;
    $form['body_field']['teaser_js'] = NULL;
    $form['body_field']['teaser_include'] = NULL;
    $form['buttons']['#weight'] = 100;
  }

  switch($form_id) {
    case 'help_ticket_node_form':
      if($user->uid>0)
        $form['title']['#default_value'] = $user->mail;
      $form['field_phone_number']['#access'] = false;
      break;
    case 'project_node_form':
      $form['field_dosomething_award_winner'][0]['value']['#required'] = FALSE;
      $form['taxonomy'][variable_get('dosomething_causes_vid',5)]['#required'] = TRUE;
      $form['taxonomy'][variable_get('dosomething_how_long_vid',4)]['#required'] = TRUE;
      $form['taxonomy'][variable_get('dosomething_who_vid',3)]['#required'] = TRUE;
      _validate_birthdate_set_error($user->uid);
      $form['og_nodeapi']['visible']['og_groups']['#title'] = 'Did you do this project with the Do Something Club listed below?';
      $form['og_nodeapi']['visible']['og_groups']['#description'] = 'If this is a Club project, make sure the box has a check in it so that the project shows up on your Club\'s profile';
      if (count($form['og_nodeapi']['visible']['og_groups']['#options'])) {
        $defaults = array();
        foreach (array_keys($form['og_nodeapi']['visible']['og_groups']['#options']) as $gid) {
          $defaults[] = $gid;
        }
        $form['og_nodeapi']['visible']['og_groups']['#default_value'] = $defaults;
      }
      break;
    case 'grant_application_node_form':
      if(!user_access('administer grant applications'))
        unset($form['field_grant_application_status']);
      break;
    case 'grant_node_form':
      $form['group_personal_info']['field_where_did_you_hear']['#access'] = false;
      $form['#validate']['grant_form_validate'] = array();
      break;
    case 'grant_judge_node_form':
      $form['field_grant_judge_nid']['#prefix'] = '<div class="hide-me">';
      $form['field_grant_judge_nid']['#suffix'] = '</div>';
      $qid = db_result(db_query("SELECT qid FROM {nodequeue_nodes} WHERE nid = %d",arg(1)));
      if ($qid == '50') {
        $form['#redirect'] = "grants/judge/seed";
      } else if ($qid == '51') {
        $form['#redirect'] = "grants/judge/growth";
      } else if ($qid == '63') {
        $form['#redirect'] = "grants/judge/get-well-soon";
      } else if ($qid == '64') {
        $form['#redirect'] = "grants/judge/get-well-soon-2";
      }
      break;

    case 'action_guide_node_form':
      $form['#validate'][] = 'action_guide_form_validate';
      break;
    case 'scavenger_2011_signup_node_form':
      $form['field_email'][0]['#required'] = 0;
      $form['#validate'][] = 'validate_email_or_phone';
      break;
    case 'ebd_signup_node_form':
    case 'campaign_ebd_2011_node_form':
      $form['body_field']['body']['#required'] = 1;
      $form['#validate'][] = 'user_field_form_validate';
      $form['#validate_args'] = array(
          'profile_fname',
          'profile_lname',
          'mail',
          'profile_cell',
          'profile_state',
          'profile_zip',
          );
      break;
    case 'club_node_form':
      $form['title']['#description'] = 'Put the Name of your School/Town Do Something Club; Ex: Franklin High School Do Something Club or Westfield Do Something Club; calling yourself a Do Something Club in your community will help attract members and let everyone know that you\'re all about action!';
      $form['og_selective']['#prefix'] = '<div class="hide-me">';
      $form['og_selective']['#suffix'] = '</div>';
      $form['og_selective']['#default_value'] = 1;
      break;

  }
}

function dosomething_forms_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  global $user;

  switch($node->type) {
    case 'ebd_signup':
      if ($op == 'presave') {
        dia_signup(array(
                     'link' => 'groups',
                     'table' => 'supporter',
                     'linkKey' => 100755,
                     'Organization' => $_POST['title'],
                 ));
       }
      break;
    case 'scavenger_2011_signup':
      if ($op == 'presave') {
        if ($_POST['field_hunt_subscriptions']['value']['email']) {
          dia_signup(array(
                       'link' => 'groups',
                       'table' => 'supporter',
                       'linkKey' => 103519,
                       'Organization' => $_POST['title'],
                       'First_Name' => $_POST['field_campaign_first_name'][0]['value'],
                       'Last_Name' => $_POST['field_campaign_last_name'][0]['value'],
                       'Email' => $_POST['field_email'][0]['value'],
                       'Phone' => $_POST['field_campaign_phone'][0]['value'],
                       'Zip' => $_POST['locations'][0]['postal_code']
                     ));
        }
        if ($_POST['field_hunt_subscriptions']['value']['text']) {
          ds_mobile_mcommons_optin_campaign($_POST['field_campaign_phone'][0]['value'], 58651, 72861);
        }
      }
      break;
    case 'project_update':
      // mark the parent project node as updated
      if($op=='insert')
      {
        if(is_numeric($node->field_project[0]['nid']))
        {
          if($project_node = node_load(array('nid' => intval($node->field_project[0]['nid']))))
          {
            $project_node->changed = time();
            node_save($project_node);
          }

        }
      }
    break;
  }

}

function dosomething_forms_menu() {
  $items = array();
  $items['help/user/find/%'] = array(
    'page callback' => '_dosomething_forms_user_find',
    'type' => MENU_CALLBACK,
    'page arguments' => array(3),
    'access callback' => 'user_access',
    'access arguments' => array('administer nodes'),
  );
  return $items;
}

function _validate_birthdate_set_error($uid) {
  $user_owner = user_load(array('uid' => $uid));
  $birthdate = '';
  if (isset($user_owner)) {
    $birthdate = $user_owner->profile_bday;
  }
  $birthdate = preg_replace('/[^\d]+/', '-', $birthdate);
  $birthdate_parts = explode('-', $birthdate);
  $b_month = $birthdate_parts[0];
  $b_day = $birthdate_parts[1];
  $b_year = $birthdate_parts[2];
  if (strlen($b_year) == 2) {
    if ($b_year && $b_year > 40) {
      $b_year += 1900;
    } else {
      $b_year += 2000;
    }
  }

  if (! (strlen($b_year) == 4 &&
      strlen($b_month) <= 2 &&
      strlen($b_month) > 0 &&
      strlen($b_day) > 0 && strlen($b_day) <= 2)) {
     $path = '/user/'.$user_owner->uid.'/edit/Personal Information';
     drupal_set_message(t('Oops!  We need to know your birthday, but it is missing from your profile.  <a href="'.$path.'" target="_blank">Click here</a> to open your profile in a new window.  You can submit this form after updating your birthday in your profile.'), 'error');
  } else {
    $b_time = strtotime($b_year.'-'.$b_month.'-'.$b_day);
    $birthday_of_26_yr_old = strtotime('26 years ago');
    //Check if under 26 to update projects
    if ($b_time < $birthday_of_26_yr_old) {
   //   form_set_error(t('You must be 25 or younger to add a project'));
    }
  }
}


function user_field_form_validate($form, &$form_values) {
  $user = $form['#ds_data']['user'];
  $field_names = array(
    'profile_fname' => 'First Name',
    'profile_lname' => 'Last Name',
    'profile_address1' => 'Address 1',
    'profile_address2' => 'Address 2',
    'profile_city' => 'City',
    'profile_state' => 'State',
    'profile_zip' => 'Zip',
    'profile_cell' => 'Cell',
    'profile_bday' => 'Birthday',
  );

  $args = $form['#validate_args'];
  foreach ($args as $field) {
    if (! $user->$field) {
      form_set_error($field, t('Please enter your '.$field_names[$field]));
    }
  }
}

function grant_form_validate($form, &$form_values) {
  $today = getdate();
  if ($form_values['field_recipient_birthdate'][0]['value']['mday'] == $today['mday']
   && $form_values['field_recipient_birthdate'][0]['value']['mon'] == $today['mon']
   && $form_values['field_recipient_birthdate'][0]['value']['year'] == $today['year']) {
    form_set_error('field_recipient_birthdate', t('Please choose a valid Birth Date'));
  }
}

function action_guide_form_validate($form, &$form_state) {
  /*
  if (! preg_match('/^(?:How To|Action Tips|Training):/', $form_values['title'])) {
    form_set_error('title', t('Title of action guide must begin with "How To:", "Action Tips:" or "Training:"'));
  }
   */
}

function dia_signup ($args = array()) {

  global $user;
  $user = user_load(array('uid' => $user->uid));

  $ch = curl_init();

  $default_data = array(
    'First_Name' => $user->profile_fname,
    'Last_Name' => $user->profile_lname,
    'Organization' => $_POST['title'],
    'Email' => $user->mail,
    'Phone' => $user->profile_cell,
    'State' => $user->profile_state,
    'Zip' => $user->profile_zip,
    'link' => 'groups',
    'linkKey' => '',
    'table' => 'supporter',
    'organization_KEY' => '5216'
    );

  $data = array();
  $data = array_merge($default_data, $args);

  $items = array();
  foreach($data as $key=>$item){
    if ($item != '') {
      $items[] = $key.'='.$item;
    }
  }

  $string = "?".implode('&',$items);

  $msg = 'Going to: http://org2.democracyinaction.org/dia/api/process.jsp'.rawurlencode($string);

  curl_setopt($ch, CURLOPT_URL, 'http://org2.democracyinaction.org/dia/api/process.jsp'.rawurlencode($string));
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
  $return = 1;
  if (curl_exec($ch) === false) {
    $msg .= 'Curl error: '.curl_error($ch);
    $return = 0;
  }
  //drupal_set_message($msg);

  return $return;

}


function _dosomething_forms_user_find($search_term) {

  $users = array();
  // create a json version of the search result
  $result = db_query("SELECT mail, name, uid FROM {users} WHERE mail LIKE '%%%s%%'", $search_term);
  while ($row = db_fetch_object($result)) {
    $users[] = array("email" => $row->mail, "name" => $row->name, "link" => l($row->name, 'user/'.$row->uid));
  }
  $json = drupal_to_js($users);

  // format the json as a callback function
  // see: http://docs.jquery.com/Ajax/jQuery.getJSON for more information
  if ($_GET['jsoncallback']) {
    $json = $_GET['jsoncallback'] . "(" . $json . ");";
  }

  // output the json
  // drupal_set_header('Content-Type: application/javascript; charset=utf-8');
  print $json;
  // print print_r($users, TRUE);

  // stop the script, so the theme layer is not applied
  die;
}

/*
Checks if node deserves badges, returns associative arrays
*/
function dosomething_badge_check($node) {
  $badge_queue = array('grantwinner' => 9, 'projofday' => 34);
  $queue_badge = array_flip($badge_queue);
  $qid_str = implode(',', array_values($badge_queue));
  if(is_numeric($node->nid)){
    $badges = array();
    //print_r($node);

    //search for grant attached to project, and see if it is award winner
    //$query = "SELECT n.title, n.type, n.nid from content_field_project p, node n WHERE p.field_project_nid = $node->nid AND n.nid=p.nid AND n.vid=p.vid AND n.type='grant_application'";
    $query = "SELECT nq.nid,ep.field_project_reference_nid as 'refnid', nq.qid
              FROM nodequeue_nodes nq
              LEFT JOIN content_type_editorial_project ep ON nq.nid=ep. nid
              WHERE (nq.nid =$node->nid OR ep.field_project_reference_nid=$node->nid )
              AND nq.qid IN ($qid_str)";

    //print $query;
    $result = mysql_query($query);
    $badges['grantwinner'] = FALSE;
    while($row=mysql_fetch_object($result)){
      //is it a winner?
      /*
      $grant_node = node_load($row['nid']);
      if($grant_node->field_grant_application_status[0][value]=="Grant Winner"){
        $badges['grantwinner'] = TRUE;
      }else{
        $badges['grantwinner'] = FALSE;
      }
       */
      $badges[$queue_badge[$row->qid]] = TRUE;
    }
    unset($query);
    unset($result);

    //search for club attached to project
    $query = "select o.nid from og_ancestry o inner join node n on o.group_nid=n.nid where n.type='club' and n.status>0 and o.nid=$node->nid";
    $result = mysql_query($query);
    $badges['clubproject'] = FALSE;

    while($row=mysql_fetch_array($result)){
      $badges['clubproject'] = TRUE;
    }

    // also include clubs mentioned in the Club Projects nodequeue
    // $query = "select o.nid from og_ancestry o inner join node n on o.group_nid=n.nid where n.type='club' and n.status>0 and o.nid=$node->nid";
    $query = "SELECT n.nid from nodequeue_nodes n WHERE n.nid = $node->nid AND n.qid = 10";
    $result = mysql_query($query);

    while($row=mysql_fetch_array($result)){
      $badges['clubproject'] = TRUE;
    }

    //check DS award flag.
    if($node->field_dosomething_award_winner[0]['value']=='Yes'){
      $badges['dsaward'] = TRUE;
    }else{
      $badges['dsaward'] = FALSE;
    }

    return $badges;
  }
}

/**
Validate an email address.
Provide email address (raw input)
Returns true if the email address has the email
address format and the domain exists.
*/
function validEmail($email)
{
   $isValid = true;
   $atIndex = strrpos($email, "@");
   if (is_bool($atIndex) && !$atIndex) {
      $isValid = false;
   } else {
      $domain = substr($email, $atIndex+1);
      $local = substr($email, 0, $atIndex);
      $localLen = strlen($local);
      $domainLen = strlen($domain);
      if ($localLen < 1 || $localLen > 64) {
         // local part length exceeded
         $isValid = false;
      } else if ($domainLen < 1 || $domainLen > 255) {
         // domain part length exceeded
         $isValid = false;
      } else if ($local[0] == '.' || $local[$localLen-1] == '.') {
         // local part starts or ends with '.'
         $isValid = false;
      } else if (preg_match('/\\.\\./', $local)) {
         // local part has two consecutive dots
         $isValid = false;
      } else if (!preg_match('/^[A-Za-z0-9\\-\\.]+$/', $domain)) {
         // character not valid in domain part
         $isValid = false;
      } else if (preg_match('/\\.\\./', $domain)) {
         // domain part has two consecutive dots
         $isValid = false;
      }
      else if (!preg_match('/^(\\\\.|[A-Za-z0-9!#%&`_=\\/$\'*+?^{}|~.-])+$/',
                str_replace("\\\\","",$local))) {
         // character not valid in local part unless
         // local part is quoted
         if (!preg_match('/^"(\\\\"|[^"])+"$/',
             str_replace("\\\\","",$local))) {
            $isValid = false;
         }
      } if ($isValid && !(checkdnsrr($domain,"MX") ||
          checkdnsrr($domain,"A"))) {
         // domain not found in DNS
         $isValid = false;
      }
   }
   return $isValid;
}

function validate_email_or_phone($form, &$form_values) {
  global $user;
  $valid_mobile = ds_mobile_check($form_values['values']['field_campaign_phone'][0]['value']);
  if (! $form_values['values']['field_email'][0]['value'] && ! $valid_mobile ) {
    form_set_error('field_campaign_phone', 'Either an email address or a 10-digit cell phone number must be given to enter this campaign.');
  } else if ($form_values['values']['field_campaign_phone'][0]['value'] && ! $valid_mobile) {
    form_set_error('field_campaign_phone', 'Phone number must be 10 digits.  Either an email address or a 10-digit cell phone number must be given to enter this campaign.');
  }
}

?>
